<?php
// $Id: spritemenu.module,v 1.1.4.6 2009/07/29 19:52:22 hanoii Exp $

/**
 * @file
 * Add an option to upload an image file for a menu, it can contains both normal
 * (top, left) and hover, (bottom, left).
 *
 */

define('SPRITEMENU_DEFAULT_EXTRACSS', 'ul.primary-links li');

function _spritemenu_css_path() {
  $directory = 'public://' .  variable_get('spritemenu_path', 'spritemenu');
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
  return $directory;
}

function _spritemenu_css_filepath() {
  return _spritemenu_css_path() . '/spritemenu.css';
}

function _spritemenu_build_css() {
  $extraselector = variable_get('spritemenu_extraselector', SPRITEMENU_DEFAULT_EXTRACSS);
  if ($extraselector) {
    $extraselector = split(',', $extraselector);
  }
  $selectors = array();
  if (is_array($extraselector)) {
    $selectors = array_merge($extraselector, $selectors);
  }

  $css = _spritemenu_css_filepath();
  $result = db_query("SELECT * FROM {spritemenu} s INNER JOIN {file_managed} f ON s.fid = f.fid");

  foreach ($result as $spritemenu) {
    if (!$f) {
      $f = fopen($css, 'w+');
    }

    $img = str_replace($GLOBALS['base_url'], '', file_create_url($spritemenu->uri));
    $css = '';

    // Link
    $position_link = $spritemenu->link;
    $css_selectors = array();
    foreach ($selectors as $selector) {
      if ($selector) {
        $selector .= ' ';
      }
      $css_selectors[] = "{$selector}a.spritemenu-{$spritemenu->mid},\n{$selector}a.spritemenu-{$spritemenu->mid}:link";
      $css_selectors[] = "li.active {$selector}a.spritemenu-{$spritemenu->mid}";
      $css_selectors[] = "li.active-trail {$selector}a.spritemenu-{$spritemenu->mid}";
    }
    $css .= implode($css_selectors, ",\n") . " {\n  text-indent: -9999px; \n  text-decoration: none; \n  width: 100%; \n  background: transparent url(\"$img\") no-repeat scroll $position_link;\n}\n";

    // Visited
    $position_visited = $spritemenu->visited;
    if (!$postition_visited) {
      $position_visited = $position_link;
    }
    $css_selectors = array();
    foreach ($selectors as $selector) {
      if ($selector) {
        $selector .= ' ';
      }
      $css_selectors[] = "{$selector}a.spritemenu-{$spritemenu->mid}:visited";
    }
    $css .= implode($css_selectors, ",\n") . " {\n  text-indent: -9999px; \n  text-decoration: none; \n  width: 100%; \n  background: transparent url(\"$img\") no-repeat scroll $position_visited;\n}\n";

    // Hover
    $position_hover = $spritemenu->hover;
    if (!$position_hover) {
      $position_hover = $position_link;
    }
    $css_selectors = array();
    foreach ($selectors as $selector) {
      if ($selector) {
        $selector .= ' ';
      }
      $css_selectors[] = "{$selector}a.spritemenu-{$spritemenu->mid}:hover";
    }
    $css .= implode($css_selectors, ",\n") . " {\n  text-indent: -9999px; \n  text-decoration: none; \n  width: 100%; \n  background: transparent url(\"$img\") no-repeat scroll $position_hover;\n}\n";

    // Active
    $position_active = $spritemenu->active;
    if (!$position_active) {
      $position_active = $position_link;
    }
    $css_selectors = array();
    foreach ($selectors as $selector) {
      if ($selector) {
        $selector .= ' ';
      }
      $css_selectors[] = "{$selector}a.spritemenu-{$spritemenu->mid}.active";
    }
    $css .= implode($css_selectors, ",\n") . " {\n  text-indent: -9999px; \n  text-decoration: none; \n  width: 100%; \n  background: transparent url(\"$img\") no-repeat scroll $position_active;\n}\n";
    fwrite($f, $css);
  }

  if ($f) {
    fclose($f);
  }
  else {
    // remove empty css
    file_unmanaged_delete($css);
  }
}

/**
 * Implements hook_init().
 */
function spritemenu_init() {
  //_spritemenu_build_css();
  $css = _spritemenu_css_filepath();
  if (file_exists($css)) {
    drupal_add_css($css);
  }
}

function spritemenu_form_menu_edit_item_submit($form, &$form_state) {
  $mid = $form_state['values']['mlid'];
  $spritemenu = db_query("SELECT * FROM {spritemenu} WHERE mid = :mid", array(':mid' => $mid))->fetchObject();

  // Load the file entry.
  $file = NULL;
  if (!empty($form_state['values']['spritemenu']['image'])) {
    $file = file_load($form_state['values']['spritemenu']['image']);
  }

  // Save the file permanently if its a new file.
  if ($file && $file->status == 0) {
    $file->status = 1;
    file_save($file);
    file_usage_add($file, 'spritemenu', 'menu_link', $mid);
  }

  // Delete any previous file being used.
  if ($file && !empty($spritemenu->fid) && $spritemenu->fid != $file->fid && ($previous_file = file_load($spritemenu->fid))) {
    file_usage_delete($previous_file, 'spritemenu', 'menu_link', $mid);
    file_delete($previous_file);
  }

  if ($file) {
    if (!$spritemenu) {
      $id = db_insert('spritemenu')
        ->fields(array(
          'mid' => $mid,
          'path' => '',
          'fid' => $file->fid,
          'link' => $form_state['values']['spritemenu']['link'],
          'visited' => $form_state['values']['spritemenu']['visited'],
          'hover' => $form_state['values']['spritemenu']['hover'],
          'active' => $form_state['values']['spritemenu']['active'],
        ))
        ->execute();
    }
    else {
      db_update('spritemenu')
        ->fields(array(
          'path' => '',
          'fid' => $file->fid,
          'link' => $form_state['values']['spritemenu']['link'],
          'visited' => $form_state['values']['spritemenu']['visited'],
          'hover' => $form_state['values']['spritemenu']['hover'],
          'active' => $form_state['values']['spritemenu']['active'],
        ))
        ->condition('mid', $mid)
        ->execute();
    }
    $build = TRUE;
  }
  elseif ($spritemenu) {
    // Delete the spritmenu entry if the file has been removed.
    db_delete('spritemenu')
      ->condition('mid', $mid)
      ->execute();
    $build = TRUE;
  }

  if ($build) {
    drupal_set_message(t('Sprite Graphic Menu: Information saved and CSS rebuilt. Please Ctrl+Refresh the page to reflect the changes.'));
    _spritemenu_build_css();
  }
}

function spritemenu_form_menu_reset_item_confirm_submit($form, &$form_state) {
  $mid = $form_state['values']['item']['mlid'];
  $spritemenu = db_query("SELECT * FROM {spritemenu} WHERE mid = :mid", array(':mid' => $mid))->fetchObject();
  if ($spritemenu && $spritemenu->fid && ($file = file_load($spritemenu->fid))) {
    file_usage_delete($file, 'spritemenu', 'menu_link', $mid);
    file_delete($file);
  }
  db_delete('spritemenu')
    ->condition('mid', $mid)
    ->execute();
  drupal_set_message(t('Sprite Graphic Menu: Menu information deleted.'));
  _spritemenu_build_css();
}

/**
 * Implements hook_form_alter().
 */
function spritemenu_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'menu_reset_item_confirm') {
    // Add submit handler, make it the first one
    $form['#submit'] = array_merge(array('spritemenu_form_menu_reset_item_confirm_submit'), $form['#submit']);
  }

  if ($form_id == 'menu_edit_item' && ($mid = $form['mlid']['#value'])) {
    // Add submit handler, make it the first one
    $form['#submit'] = array_merge(array('spritemenu_form_menu_edit_item_submit'), $form['#submit']);

    // move submit to the end
    $form['submit']['#weight'] = 2;

    $form['#attributes'] = array('enctype' => 'multipart/form-data');

    $spritemenu = db_query("SELECT * FROM {spritemenu} WHERE mid = :mid", array(':mid' => $mid))->fetchObject();

    $form['spritemenu'] = array(
      '#type' => 'fieldset',
      '#title' => t('Sprite Graphic Menu'),
      '#collapsible' => FALSE,
      '#collapsed' => !($spritemenu),
      '#weight' => 1,
      '#tree' => TRUE,
    );

    $form['spritemenu']['image'] = array(
      '#type' => 'managed_file',
      '#title' => t('Image file'),
      '#default_value' => $spritemenu ? $spritemenu->fid : NULL,
      '#upload_location' => _spritemenu_css_path(),
    );

    $form['spritemenu']['link'] = array(
      '#type' => 'textfield',
      '#title' => t('Link'),
      '#description' => t('Enter the CSS positioning corresponding to the sprite of the image you want to use.'),
      '#default_value' => ($spritemenu->link ? $spritemenu->link : 'left top'),
      '#required' => TRUE,
    );
    $form['spritemenu']['visited'] = array(
      '#type' => 'textfield',
      '#title' => t('Visited'),
      '#description' => t('Enter the CSS positioning corresponding to the sprite of the image you want to use.'),
      '#default_value' => ($spritemenu->visited ? $spritemenu->visited : ''),
    );
    $form['spritemenu']['hover'] = array(
      '#type' => 'textfield',
      '#title' => t('Hover'),
      '#description' => t('Enter the CSS positioning corresponding to the sprite of the image you want to use.'),
      '#default_value' => ($spritemenu->hover ? $spritemenu->hover : 'left bottom'),
    );
    $form['spritemenu']['active'] = array(
      '#type' => 'textfield',
      '#title' => t('Active'),
      '#description' => t('Enter the CSS positioning corresponding to the sprite of the image you want to use. This uses the active class of the link, not the CSS :active pseudo class.'),
      '#default_value' => ($spritemenu->active ? $spritemenu->active : ''),
    );
  }

  if ($form_id == 'menu_configure') {
    $form['#submit'] = array_merge($form['#submit'],  array('spritemenu_form_menu_configure_submit'));
    $form['spritemenu'] = array(
      '#type' => 'fieldset',
      '#title' => t('Sprite Graphic Menu'),
      '#weight' => 0,
      '#collapsible' => TRUE,
    );

    $form['spritemenu']['spritemenu_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Directory'),
      '#description' => t('A directory that will reside inside the files directory'),
      '#default_value' => variable_get('spritemenu_path', 'spritemenu'),
    );

    $form['spritemenu']['spritemenu_extraselector'] = array(
      '#type' => 'textfield',
      '#title' => t('Extra CSS link selectors'),
      '#description' => t('<b>This is and advance setting and should be set by someone with CSS knowledge. It may break the dynamic CSS created by this module</b>. A comma separated list of CSS selectors to which a.spritemenu-MENUID will be appended. Useful if some links from your theme\' styles takes precedence over the ones defines by this module.'),
      '#default_value' => variable_get('spritemenu_extraselector', SPRITEMENU_DEFAULT_EXTRACSS),
    );
  }
}

function spritemenu_form_menu_configure_submit($form, &$form_state) {
  drupal_set_message(t('Sprite Graphic Menu: Information saved and CSS rebuilt. Please Ctrl+Refresh the page to reflect the changes.'));
  _spritemenu_build_css();
}

function spritemenu_menu_link_alter(&$item) {
  $spritemenu = db_query("SELECT * FROM {spritemenu} WHERE mid = :mid", array(':mid' => $item['mlid']))->fetchObject();

  // Ensure a class array exists.
  if (!isset($item['options']['attributes']['class'])) {
    $item['options']['attributes']['class'] = array();
  }
  if (is_string($item['options']['attributes']['class'])) {
    $item['options']['attributes']['class'] = explode(' ', $item['options']['attributes']['class']);
  }

  // Check if spritemenu currently has a class on this menu item and remove it.
  foreach ($item['options']['attributes']['class'] as $key => $classname) {
    if (preg_match("/spritemenu-([0-9]*)(\W|$)/", $classname)) {
      unset($item['options']['attributes']['class'][$key]);
    }
  }

  // Add the new class.
  if ($spritemenu) {
    $item['options']['attributes']['class'][] = ' spritemenu-' . $item['mlid'];
  }

  // Clean up after ourselves and remove the class attribute if empty.
  if (empty($item['options']['attributes']['class'])) {
    unset($item['options']['attributes']['class']);
  }
}

function spritemenu_menu() {
  $items = array();

  $items['spritemenu/clean_orphaned'] = array(
    'title' => 'Clean orphaned items',
    'description' => 'Clean spritemenu orphaned menu items.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spritemenu_clean_orphaned'),
    'access arguments' => array('clean orphaned menu items'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function spritemenu_permission() {
  return array(
    'clean orphaned menu items' => array(
      'title' => t('Clean orphaned menu items'),
    ),
  );
}

function spritemenu_clean_orphaned_submit($form, &$form_state) {
  $result = db_query("SELECT s.* FROM {spritemenu} s LEFT JOIN {menu_links} ml ON s.mid = ml.mlid WHERE ml.mlid IS NULL");

  foreach ($spritemenu as $spritemenu) {
    if ($spritemenu->fid && ($file = file_load($spritemenu->fid))) {
      file_usage_delete($file, 'spritemenu', 'menu_link', $spritemenu->mid);
      file_delete($file);
    }
    db_delete('spritemenu')
      ->condition('mid', $spritemenu->mid)
      ->execute();
  }

  drupal_set_message(t('Sprite Graphic Menu: Orphaned menu items cleaned and CSS rebuilt. Please Ctrl+Refresh the page to reflect the changes.'));
  _spritemenu_build_css();

  $form_state['redirect'] = 'admin/reports/status';
}

function spritemenu_clean_orphaned() {
  return confirm_form($form, t('Are you sure you want to clean the spritemenu orphaned items?'), 'admin/reports/status');
}
